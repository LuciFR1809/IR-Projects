{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled","provenance":[],"collapsed_sections":[],"mount_file_id":"1n1t4dWpvYg246g5mf_1Pz3nJjqpAkgJq","authorship_tag":"ABX9TyPUN7l7KlYKz6dcbGacCTGp"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y-KbRxR6l1z1","executionInfo":{"status":"ok","timestamp":1605958665514,"user_tz":-330,"elapsed":1442,"user":{"displayName":"ASHNA SWAIKA","photoUrl":"","userId":"17207238856895085641"}},"outputId":"3a1cfc3e-abf8-4b24-eb8c-7eb1530fb452"},"source":["%cd \"/content/drive/My Drive/IR/useFiles3\""],"execution_count":null,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/IR/useFiles3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"tApvJUGwle3e","executionInfo":{"status":"error","timestamp":1605962881407,"user_tz":-330,"elapsed":15656,"user":{"displayName":"ASHNA SWAIKA","photoUrl":"","userId":"17207238856895085641"}},"outputId":"12818037-0874-42ce-8997-8151a1079f9d"},"source":["\n","  \n","import pickle\n","import numpy as np\n","from sklearn.metrics.pairwise import cosine_similarity\n","from scipy import sparse\n","from time import time\n","import os\n","import math\n","\n","\n","def loadFile(filename):\n","    '''\n","    Loads file saved after running preprocess.py.\n","    return: opened file object\n","    '''\n","    file = open(filename, 'rb')\n","    filename = pickle.load(file)\n","    return filename\n","\n","\n","def centredCosine(utility_matrix):\n","    '''\n","    Converts a matrix to its centerd cosine.\n","    return: centred cosine matrix\n","    '''\n","    utility_matrix = utility_matrix.astype(\"float\")\n","    no_of_rows = utility_matrix.shape[0]\n","    no_of_cols = utility_matrix.shape[1]\n","    mat = utility_matrix\n","    for i in range(no_of_rows):\n","        n = no_of_cols - np.count_nonzero(mat[i] == 0)\n","        avg = 0\n","        if n > 0:\n","            avg = np.sum(mat[i]) / float(n)\n","        mat[i] = np.where(mat[i] != 0, mat[i] - avg, 0)\n","    return mat\n","\n","\n","def itemItemCollabFilter(utility_matrix, test, movies_map, users_map, ratings):\n","    '''\n","    Fills the spaces in the utility matrix using the test set data\n","    return: actual rating -- List\n","            prediction -- List\n","            pearson similarity - 2d numpy matrix\n","    '''\n","    mat = np.transpose(utility_matrix)\n","    ratings = np.transpose(ratings)\n","    mat = centredCosine(mat)\n","    sparse_mat = sparse.csr_matrix(mat)\n","    pearson_similarity = cosine_similarity(sparse_mat)\n","    actual_rating = []\n","    prediction = []\n","    for i in range(int(len(test[\"movie_id\"]) / 10)):\n","        # if i % 100 == 0:\n","        #     # print(i, \" \", int(len(test[\"movie_id\"]) / 10))\n","        user = test.iloc[i, 0]\n","        movie = test.iloc[i, 1]\n","        rating = test.iloc[i, 2]\n","        movie = movies_map[str(movie)]\n","        user = users_map[str(user)]\n","        actual_rating.append(int(rating))\n","\n","        ''' calculating the weighted mean '''\n","        weighted_sum = 0\n","        weight = 0\n","        sim_movie = pearson_similarity[movie]\n","        user_ratings = ratings[:, user]\n","        for j in range(int(len(movies_map))):\n","            if user_ratings[j] != 0:\n","                weighted_sum += sim_movie[j] * user_ratings[j]\n","                weight += abs(sim_movie[j])\n","        if (weight != 0):\n","            prediction.append(weighted_sum / weight)\n","        else:\n","            prediction.append(3)\n","    return actual_rating, prediction, pearson_similarity\n","\n","\n","def userUserCollabFilter(utility_matrix, test, movies_map, users_map, ratings):\n","    '''\n","    Fills the spaces in the utility matrix using the test set data\n","    return: actual rating -- List\n","            prediction -- List\n","            pearson similarity - 2d numpy matrix\n","    '''\n","    mat = utility_matrix\n","    mat = centredCosine(mat)\n","    sparse_mat = sparse.csr_matrix(mat)\n","    pearson_similarity = cosine_similarity(sparse_mat)\n","    actual_rating = []\n","    prediction = []\n","    for i in range(int(len(test[\"movie_id\"]) / 100)):\n","        # if i % 100 == 0:\n","        #     # print(i, \" \", int(len(test[\"movie_id\"]) / 100))\n","        user = test.iloc[i, 0]\n","        movie = test.iloc[i, 1]\n","        rating = test.iloc[i, 2]\n","        movie = movies_map[str(movie)]\n","        user = users_map[str(user)]\n","        actual_rating.append(int(rating))\n","\n","        ''' calculating the weighted mean '''\n","        weighted_sum = 0\n","        weight = 0\n","        sim_user = pearson_similarity[user]\n","        movie_ratings = ratings[:, movie]\n","        for j in range(int(len(users_map))):\n","            if movie_ratings[j] != 0:\n","                weighted_sum += sim_user[j] * movie_ratings[j]\n","                weight += abs(sim_user[j])\n","        if (weight != 0):\n","            prediction.append(weighted_sum / weight)\n","        else:\n","            prediction.append(3)\n","    return actual_rating, prediction, pearson_similarity\n","\n","\n","def computeError(actual_rating, prediction):\n","    '''\n","    Computes root mean square error and mean absolute error\n","    return: rmse -- root mean square (float)\n","            mean -- mean absolute error (float)\n","    '''\n","    n = len(prediction)\n","    actual_rating = np.array(actual_rating)\n","    prediction = np.array(prediction)\n","    rmse = np.sum(np.square(prediction - actual_rating)) / n\n","    mae = np.sum(np.abs(prediction - actual_rating)) / n\n","    return math.sqrt(rmse), mae\n","\n","\n","def topKRecommendation(k, movie_map, similarity, movie_id):\n","    '''\n","    Generates top k recommendations similar to a movie\n","    return: top_similar -- list of tuples(similarity, movie_no)\n","    '''\n","    row_no = movie_map[movie_id]\n","    top_similar = []\n","    for i in range(len(movie_map)):\n","        if (i != row_no):\n","            top_similar.append([similarity[row_no][i], i])\n","    top_similar.sort(reverse=True)\n","    return top_similar[:k]\n","\n","\n","\n","def mapGenre():\n","    cwd = os.path.abspath('./')\n","    cwd = os.path.join(cwd, \"dataset\")\n","    filename = os.path.join(cwd, \"movies.dat\")\n","    List = []\n","    with open(filename, 'r',encoding='latin-1') as f:\n","        data = f.read()\n","        data = data.split(\"\\n\")\n","        for li in data:\n","            list_temp = li.split(\"::\")\n","            if (len(list_temp) > 1):\n","                List.append(list_temp[2])\n","    return List\n","\n","\n","def main():\n","    load_time_start = time()\n","    utility_matrix = loadFile(\"utility\")\n","    ratings = loadFile(\"utility\")\n","    test_data = loadFile(\"test\")\n","    users_map = loadFile(\"users_map\")\n","    movies_map = loadFile(\"movie_map\")\n","    movie = loadFile(\"movie\")\n","    load_time_end = time()\n","    load_time = load_time_end - load_time_start\n","    print(\"time taken to load  \", load_time, 's')\n","\n","    inv_map = {}\n","    for k, v in movies_map.items():\n","        inv_map[v] = k\n","\n","    genre_list = mapGenre()\n","    user_id = \"510\"\n","\n","    comp_time_start = time()\n","    utility_matrix = utility_matrix.astype(\"float\")\n","    actual_rating, prediction, similarity = userUserCollabFilter(\n","        utility_matrix, test_data, movies_map, users_map, ratings)\n","    rmse, mae = computeError(actual_rating, prediction)\n","    comp_time_end = time()\n","    comp_time = comp_time_end - comp_time_start\n","    print(\"computation time ::  \", comp_time / 60, 'min')\n","    print(\"root mean square error ::  \", rmse)\n","    print(\"mean absolute error ::  \", mae)\n","\n","    recommendations = topKRecommendation(20, movies_map, similarity, user_id)\n","\n","    print(f\"\\n\\n*******Recommendation for user - user filter for user {user_id}*******\\n\")\n","    for item in recommendations:\n","        id = inv_map[item[1]]\n","        print(movie[int(id)], \" \", genre_list[int(id)])\n","\n","    comp_time_start = time()\n","    utility_matrix = utility_matrix.astype(\"float\")\n","    actual_rating, prediction, similarity = itemItemCollabFilter(\n","        utility_matrix, test_data, movies_map, users_map, ratings)\n","    rmse, mae = computeError(actual_rating, prediction)\n","    comp_time_end = time()\n","    comp_time = comp_time_end - comp_time_start\n","    print(\"\\n\\n\\ncomputation time ::  \", comp_time / 60, 'min')\n","    print(\"root mean square error ::  \", rmse)\n","    print(\"mean absolute error ::  \", mae)\n","\n","    recommendations = topKRecommendation(20, movies_map, similarity, user_id)\n","\n","    print(f\"\\n\\n*******Recommendation for item - item filter for user {user_id}*******\\n\")\n","    for item in recommendations:\n","        id = inv_map[item[1]]\n","        print(movie[int(id)], \" \", genre_list[int(id)])\n","\n","    file_handler = open(\"similarity\", 'wb+')\n","    pickle.dump(similarity, file_handler)\n","\n","    end_time = time()\n","    total_time = end_time - load_time_start\n","    print(\"\\n\\ntotal time taken :: \", total_time / 60)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["time taken to load   0.9309999942779541 s\n"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-23-ed1c7edd07a8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    225\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    226\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 227\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-23-ed1c7edd07a8>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m    183\u001b[0m     \u001b[0mutility_matrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mutility_matrix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"float\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m     actual_rating, prediction, similarity = userUserCollabFilter(\n\u001b[0;32m--> 185\u001b[0;31m         utility_matrix, test_data, movies_map, users_map, ratings)\n\u001b[0m\u001b[1;32m    186\u001b[0m     \u001b[0mrmse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmae\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcomputeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mactual_rating\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprediction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0mcomp_time_end\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-23-ed1c7edd07a8>\u001b[0m in \u001b[0;36muserUserCollabFilter\u001b[0;34m(utility_matrix, test, movies_map, users_map, ratings)\u001b[0m\n\u001b[1;32m     94\u001b[0m         \u001b[0;31m# if i % 100 == 0:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m         \u001b[0;31m#     # print(i, \" \", int(len(test[\"movie_id\"]) / 100))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m         \u001b[0muser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m         \u001b[0mmovie\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m         \u001b[0mrating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    867\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_scalar_access\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    868\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 869\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_takeable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    870\u001b[0m                 \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeyError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    871\u001b[0m                     \u001b[0;31m# AttributeError for IntervalTree get_value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_get_value\u001b[0;34m(self, index, col, takeable)\u001b[0m\n\u001b[1;32m   3005\u001b[0m         \"\"\"\n\u001b[1;32m   3006\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtakeable\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3007\u001b[0;31m             \u001b[0mseries\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ixs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3008\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mseries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3009\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_ixs\u001b[0;34m(self, i, axis)\u001b[0m\n\u001b[1;32m   2844\u001b[0m             \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2845\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2846\u001b[0;31m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2847\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_box_col_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2848\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36miget\u001b[0;34m(self, i)\u001b[0m\n\u001b[1;32m    992\u001b[0m         return SingleBlockManager(\n\u001b[1;32m    993\u001b[0m             block.make_block_same_class(\n\u001b[0;32m--> 994\u001b[0;31m                 \u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplacement\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mslice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    995\u001b[0m             ),\n\u001b[1;32m    996\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mmake_block_same_class\u001b[0;34m(self, values, placement, ndim)\u001b[0m\n\u001b[1;32m    260\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mndim\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    261\u001b[0m             \u001b[0mndim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 262\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplacement\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplacement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    263\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    264\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__repr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, values, placement, ndim)\u001b[0m\n\u001b[1;32m   2376\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2377\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2378\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplacement\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplacement\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2379\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2380\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, values, placement, ndim)\u001b[0m\n\u001b[1;32m    124\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplacement\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    125\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_ndim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 126\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmgr_locs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplacement\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    127\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mmgr_locs\u001b[0;34m(self, new_mgr_locs)\u001b[0m\n\u001b[1;32m    237\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mmgr_locs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    238\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmgr_locs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_mgr_locs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 239\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_mgr_locs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlibinternals\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBlockPlacement\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    240\u001b[0m             \u001b[0mnew_mgr_locs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibinternals\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBlockPlacement\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_mgr_locs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    241\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mKqNNCK9lm2B","executionInfo":{"status":"ok","timestamp":1605963925039,"user_tz":-330,"elapsed":152973,"user":{"displayName":"ASHNA SWAIKA","photoUrl":"","userId":"17207238856895085641"}},"outputId":"86fc0aa7-e093-4d10-ca32-e40511052c9c"},"source":["import numpy as np\n","from time import time\n","from collections import Counter\n","import pickle\n","import os\n","\n","\n","def loadFile(filename):\n","    '''\n","    Loads file saved after running preprocess.py.\n","    return: opened file object\n","    '''\n","    file = open(filename, 'rb')\n","    filename = pickle.load(file)\n","    return filename\n","\n","\n","def meanRating(matrix):\n","    '''\n","    calculated mean rating of give parameter matrix\n","    return: mean_rating calculated\n","    '''\n","    mean_rating = matrix.sum(axis=1)\n","    counts = Counter(matrix.nonzero()[0])\n","    n_users = matrix.shape[0]\n","    for i in range(n_users):\n","        if i in counts.keys():\n","            mean_rating[i] = mean_rating[i] / counts[i]\n","        else:\n","            mean_rating[i] = 0\n","    return mean_rating\n","\n","\n","def baseLineFilter(umat, sim, mmap, umap, ratings, mur, mmr, test, mew):\n","    '''\n","    Fills utility matrix using baseline approach of collaborative filtering\n","    return: prediction and rating\n","    '''\n","    rating = []\n","    prediction = []\n","\n","    for i in range(int(len(test[\"movie_id\"]) / 10)):\n","        # if i % 100 == 0:\n","        #     print(i, \" \", int(len(test[\"movie_id\"]) / 10))\n","        user = test.iloc[i, 0]\n","        movie = test.iloc[i, 1]\n","        stars = int(test.iloc[i, 2])\n","        movie = mmap[str(movie)]\n","        user = umap[str(user)]\n","        rating.append(stars)\n","        movie_sim = sim[movie]\n","        user_ratings = umat[:, user]\n","\n","        b = mmr[movie] + mur[user] - mew\n","\n","        num, den = 0, 0\n","        for j in range(sim.shape[0]):\n","            if (user_ratings[j] != 0):\n","                bi = mur[user] + mmr[j] - mew\n","                num += movie_sim[j] * (user_ratings[j] - bi)\n","                den += abs(movie_sim[j])\n","        predicted_rating = b\n","        if den > 0:\n","            predicted_rating += num / den\n","\n","        if (predicted_rating > 5):\n","            predicted_rating = 5\n","        elif (predicted_rating < 0):\n","            predicted_rating = 0\n","        predicted_rating = predicted_rating\n","        prediction.append(predicted_rating)\n","    return prediction, rating\n","\n","\n","def computeError(actual_rating, prediction):\n","    '''\n","    Computes root mean square error and mean absolute error\n","    return: rmse -- root mean square (float)\n","            mean -- mean absolute error (float)\n","    '''\n","    n = len(prediction)\n","    actual_rating = np.array(actual_rating)\n","    prediction = np.array(prediction)\n","    rmse = np.sum(np.square(prediction - actual_rating)) / n\n","    mae = np.sum(np.abs(prediction - actual_rating)) / n\n","    return rmse, mae\n","\n","\n","def topKRecommendation(k, movie_map, similarity, movie_id):\n","    '''\n","    Generates top k recommendations similar to a movie\n","    return: top_similar -- list of tuples(similarity, movie_no)\n","    '''\n","    row_no = movie_map[movie_id]\n","    top_similar = []\n","    for i in range(len(movie_map)):\n","        if (i != row_no):\n","            top_similar.append((similarity[row_no][i], i))\n","    top_similar.sort(reverse=True)\n","    return top_similar[:k]\n","\n","\n","def mapGenre():\n","    '''\n","    Builds a dictionary with key as movie id and genre as values\n","    return: built dictionary\n","    '''\n","    cwd = os.path.abspath('./')\n","    cwd = os.path.join(cwd, \"dataset\")\n","    filename = os.path.join(cwd, \"movies.dat\")\n","    List = []\n","    with open(filename, 'r',encoding='latin-1') as f:\n","        data = f.read()\n","        data = data.split(\"\\n\")\n","        for li in data:\n","            list_temp = li.split(\"::\")\n","            if (len(list_temp) > 1):\n","                List.append(list_temp[2])\n","    return List\n","\n","\n","def main():\n","    l_start = time()\n","    utility_matrix = loadFile(\"utility\")\n","    ratings = loadFile(\"utility\")\n","    test = loadFile(\"test\")\n","    umap = loadFile(\"users_map\")\n","    mmap = loadFile(\"movie_map\")\n","    sim = loadFile(\"similarity\")\n","    movie = loadFile(\"movie\")\n","    l_end = time()\n","    l_time = l_end - l_start\n","\n","    inv_map = {}\n","    for k, v in mmap.items():\n","        inv_map[v] = k\n","\n","    genre_list = mapGenre()\n","    user_id = \"510\"\n","\n","    comp_start = time()\n","    umat = np.transpose(utility_matrix)\n","    mur = meanRating(utility_matrix)\n","    mmr = meanRating(umat)\n","    mew = sum(sum(utility_matrix)) / np.count_nonzero(utility_matrix)\n","    prediction, actual = baseLineFilter(\n","        umat, sim, mmap, umap, ratings, mur, mmr, test, mew)\n","    comp_end = time()\n","    comp_time = comp_end - comp_start\n","\n","    rmse, mae = computeError(actual, prediction)\n","\n","    print(f\"load time {l_time}\")\n","    print(f\"computation time {comp_time}\")\n","    print(\"root mean square error :: \", rmse)\n","    print(\"print mean absolute error :: \",mae)\n","\n","    recommendations = topKRecommendation(20, mmap, sim, user_id)\n","    \n","    print(f\"\\n\\n*******Recommendation for user {user_id}*******\\n\")\n","    for item in recommendations:\n","        # item[1] = movie[inv_map[item[1]]]\n","        id = inv_map[item[1]]\n","        print(movie[int(id)], \" \", genre_list[int(id)])\n","\n","\n","if __name__ == \"__main__\":\n","    main()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["load time 1.2550792694091797\n","computation time 148.24320888519287\n","root mean square error ::  0.5275730254872456\n","print mean absolute error ::  0.5699231126291326\n","\n","\n","*******Recommendation for user 510*******\n","\n","2257   Adventure|Drama|Thriller\n","861   Action|Adventure|Crime\n","2802   Drama\n","2239   Action|Drama\n","1971   Drama\n","339   Comedy\n","508   Documentary\n","2924   Drama|Musical\n","2599   Drama\n","2437   Drama|Horror\n","1955   Drama\n","120   Adventure|Western\n","1444   Comedy|Drama\n","3074   Horror\n","552   Comedy|Drama|Romance\n","345   Drama\n","1987   Horror\n","3769   Comedy\n","1120   Action|Adventure|Crime|Thriller\n","1393   Comedy\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6i-ZTBe02PB8"},"source":[""],"execution_count":null,"outputs":[]}]}